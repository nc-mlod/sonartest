pipeline {
   agent any
   stages {
       stage('SonarQube analysis on base branch') {
           steps {
               script {
                   def baseBranch = sh(script: "git rev-parse --abbrev-ref HEAD", returnStdout: true).trim()
                   echo "BASE_BRANCH: ${baseBranch}"
                   sh "git checkout main"
               }
               withSonarQubeEnv(installationName: 'sq1') {
                   sh "mvn clean package sonar:sonar"
               }
           }
       }
       stage('SonarQube analysis on PR') {
           steps {
               script {
                   def prBranch = env.CHANGE_BRANCH
                   echo "CHANGE_BRANCH: ${env.CHANGE_BRANCH}"
                   sh "git checkout fix/controller_text"
               }
               withSonarQubeEnv(installationName: 'sq1') {
                   sh "mvn clean package sonar:sonar"
               }
           }
       }
       stage('Quality Gate') {
           steps {
               timeout(time: 1, unit: 'HOURS') {
                   waitForQualityGate abortPipeline: true
               }
           }
       }
   }
//   post {
//       always {
//           script {
//               if (currentBuild.result == 'UNSTABLE') {
//                   currentBuild.result = 'FAILURE'
//               }
//           }
//           // tutaj wprowadź swoje ścieżki do raportów
//           junit 'ścieżka-do-twoich-raportów/*.xml'
//           step([$class: 'SonarQubeQualityGateCheck'])
//       }
//   }
}
